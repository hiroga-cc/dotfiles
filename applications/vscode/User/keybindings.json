// To see default key bindings, input `Open Default Keyboard Shortcuts` to command paret.
[
  // Originally workbench.action.openGlobalKeybindings. I like editing configuration by JSON.
  {
    "key": "cmd+k cmd+s",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  // Originally workbench.action.closeWindow, but it is dangerous.
  {
    "key": "shift+cmd+w",
    "command": "workbench.action.closeAllGroups"
  },
  {
    "key": "shift+cmd+0",
    "command": "workbench.action.zoomReset"
  },
  // EMACS keybindings enhancement
  // {
  //   "key": "ctrl+shift+n",
  //   "command": "cursorDownSelect",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+shift+p",
  //   "command": "cursorUpSelect",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+shift+f",
  //   "command": "cursorRightSelect",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+shift+b",
  //   "command": "cursorLeftSelect",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+shift+a",
  //   "command": "cursorHomeSelect",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "ctrl+shift+e",
  //   "command": "cursorEndSelect",
  //   "when": "textInputFocus"
  // },
  // Split as my tmux
  {
    "key": "ctrl+s v",
    "command": "workbench.action.splitEditorLeft",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+s ctrl+v", // Intellij does not care second key stroke with ctrl or not.
    "command": "workbench.action.splitEditorLeft",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+s h",
    "command": "workbench.action.splitEditor",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+s ctrl+h",
    "command": "workbench.action.splitEditorOrthogonal",
    "when": "editorTextFocus"
  },
  // closeGroup is compatible to unsplit int IntelliJ.
  {
    "key": "ctrl+s x",
    "command": "workbench.action.closeGroup",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+s ctrl+x",
    "command": "workbench.action.closeGroup",
    "when": "editorTextFocus"
  },
  // Terminal as browser
  {
    "key": "cmd+shift+enter",
    "command": "workbench.action.terminal.focus"
  },
  {
    "key": "cmd+shift+enter",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+t",
    "command": "workbench.action.terminal.newInActiveWorkspace",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+shift+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+shift+]",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  // Like Intellij
  {
    "key": "cmd+home",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+home",
    "command": "cursorTopSelect",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+end",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+end",
    "command": "cursorBottomSelect",
    "when": "textInputFocus"
  },
  // {
  //   "key": "cmd+b", // Declaration or Usages [IntelliJ]
  //   "command": "editor.action.goToDeclaration",
  //   "when": "editorTextFocus" // not depend on editorHasReferenceProvider
  // },
  {
    "key": "cmd+b", // Declaration or Usages [IntelliJ]
    "command": "editor.action.goToReferences",
    "when": "editorTextFocus" // not depend on editorHasReferenceProvider
  },
  {
    "key": "alt+cmd+b", // Implementations [IntelliJ]
    "command": "editor.action.goToImplementation",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+alt+l",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
  },
  // etc
  {
    "key": "cmd+0",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus"
  }
]
